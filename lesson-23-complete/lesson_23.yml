course: SDEV1150
author: Nathan Humphrey
date: Oct-25-2025
lesson_title: Component Lifecycle and State Management
lesson_number: '23'
lesson_description: >
  In this lesson, students will learn how to manage state within web components to track and update data dynamically. They will explore techniques for handling internal component state, reacting to changes, and ensuring state persistence where necessary. This lesson builds on previous lessons by enabling students to create more interactive and data-driven components.
lesson_objective:
  - 1. Store and update internal state within a web component.
  - 2. Use getters and setters to interact with component properties dynamically.
  - 3. React to state changes and update the UI accordingly.
  - 4. Explain key lifecycle callbacks (connectedCallback, disconnectedCallback, attributeChangedCallback) and use them for initialization and cleanup.
related_course_outcome:
  - 2. Employ the Document Object Model (DOM) as an environment for programmatic manipulations of user interfaces with an aim toward meaningful user interactions and experiences.
  - 3. Utilize a server-side build ecosystem (e.g., node, deno, bun) to leverage external packages and construct simple client-server environments that can be deployed to production.
  - 4. Create common UI components and demonstrate principles of JavaScript component design.
resources_required:
  - Slides and notes
  - Student Response System
  - MDN Links
breakdown:
  connecting:
    time: 15 min
    content:
      - Introduction to Component State - Define component state and how it differs from properties and attributes. Explain why managing state is essential for dynamic and interactive components.
      - 'Introduce key state-related concepts:  Storing internal state in class properties. Using getters and setters for state management. Updating the UI when state changes.'
    activities:
      - activity:
          type: Quick Quiz
          text: '"How is component state different from attributes and properties?" (Options - A) State is internal to the component and changes dynamically. B) State is passed down from parent components. C) State is defined in HTML and never changes. D) State only exists in JavaScript frameworks like React.).'
          time: 5 min
      - activity:
          type: Group Discussion
          text: Ask students for examples of websites or applications where component state is necessary (e.g., counters, toggles, filters).
          time: 10 min
  exploring:
    time: 30 min
    content:
      - Store state as a private property inside a class-based web component.
      - Update state using getter and setter methods.
      - React to state changes by updating the DOM dynamically.
      - 'Introduce lifecycle callbacks: use connectedCallback for initialization, disconnectedCallback for cleanup, and attributeChangedCallback/observedAttributes for responding to property/attribute changes.'
      - Discuss state persistence using session storage or local storage.
    activities:
      - activity:
          type: Live Coding Demo
          text: 'Create a &lt;counter-button&gt; component: The button displays a number. Each click increases the count. Demonstrate using connectedCallback for initial setup (e.g., attaching event listeners and initial state), and disconnectedCallback for cleanup. Explain how state updates trigger UI re-renders inside the shadow DOM.'
          time: 10 min
      - activity:
          type: Code-along
          text: Students replicate the demo step-by-step, adding state to their own components.
          time: 20 min
  practicing:
    time: 50 min
    content:
      - Students apply state management techniques to an existing component.
      - Encourage adding interactive state updates (e.g., a toggle, count, or filter).
    activities:
      - activity:
          type: Guided Exercise
          text: 'Modify the &lt;user-card&gt; component to include state management features and lifecycle-aware updates. Add a `user` property that contains all required data for the card (name, avatar, status). Use connectedCallback to initialize rendering and event handlers. Ensure attributeChangedCallback / property-setter logic updates component state and triggers re-render when the `user` property or its sub-fields change.'
          time: 30 min
      - activity:
          type: Pair Programming
          text: Students pair up to review each other's code, ensuring proper state updates and UI changes. Instructor provides help debugging and refining component state logic.
          time: 20 min
  assessing:
    time: 15 min
    content:
      - Recap the importance of maintaining internal state in components.
      - Discuss state persistence and future possibilities (e.g., integrating with external APIs).
    activities:
      - activity:
          type: Quick Quiz
          text: '"Which technique is best for updating UI when state changes?" (Options - A) Changing attributes directly B) Modifying state inside the class and updating the DOM C) Using global variables outside the component D) Reloading the page)'
          time: 5 min
      - activity:
          type: Exit Ticket
          text: As a group, students reflect on "What was the most challenging part of handling state in a web component?".
          time: 10 min

additional_instructor_notes:
  - None
